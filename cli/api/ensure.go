package api

type EnsureConfig struct {
	Cluster   *Cluster `yaml:"cluster"`
	Gloo      *Gloo    `yaml:"gloo"`
	Workflows []string `yaml:"workflows"`
	Demos     *Demos   `yaml:"demos"`
	Resources []string `yaml:"resources"`
}

// Ensure the cluster is running with the desired specification. This will
// result in the specified cluster being configured and the local kube context
// pointing to it.
type Cluster struct {
	// A minikube cluster configuration. Only one of GKE and minikube should be provided.
	// When ensuring a minikube cluster, Valet may destroy existing minikube clusters.
	Minikube *Minikube `yaml:"minikube"`
	// A GKE cluster configuration. Only one of GKE and Minikube should be provided.
	GKE *GKE `yaml:"gke"`
}

type KubeCluster struct {
	// Beta-quality feature. Kubernetes version to install on new cluster.
	KubeVersion string `yaml:"kubeVersion"`
}

type GKE struct {
	KubeCluster
	Name     string `yaml:"name"`
	Location string `yaml:"location"`
	Project  string `yaml:"project"`
}

type Minikube struct {
	KubeCluster
}

type Gloo struct {
	// Gloo (server) version. This should not begin with a "v".
	Version    string `yaml:"version"`
	Enterprise bool   `yaml:"enterprise"`
	LicenseKey string `yaml:"licenseKey"`
	AWS        AWS    `yaml:"aws"`
	// If present, a virtual service will be created called "glooui".
	UiVirtualService *UiVirtualService `yaml:"uiVirtualService"`
}

type Artifact struct {
	Path string
}

type UiVirtualService struct {
	// If nil, the default domain "*" is used. Otherwise, a DNS entry is created in Route53
	// with the provided DNS configuration.
	DNS *DNS `yaml:"dns"`
}

type AWS struct {
	Secret   bool `yaml:"secret"`
	Upstream bool `yaml:"upstream"`
}

type DNS struct {
	// The hosted zone to use for the DNS entry. This is required and must match the name of a hosted zone in Route53.
	// Valet will use the AWS credentials provided in AWS_SHARED_CREDENTIALS_FILE.
	// The credentials must have the following AWS privileges:
	//   route53:ChangeResourceRecordSets
	//   route53:ListHostedZones
	HostedZone string `yaml:"hostedZone"`
	// The domain to map to the proxy URL. This is optional. If no value is provided, then a domain will be autogenerated
	// in the form: valet-########.HOSTED_ZONE
	Domain string `yaml:"domain"`
}

type Demos struct {
	Petclinic *Petclinic `yaml:"petclinic"`
}

type Petclinic struct {
	DNS *DNS `yaml:"dns"`
}

type Workflow struct {
	Name  string `yaml:"name"`
	Steps []Step `yaml:"steps"`
}

type Step struct {
	Apply  string `yaml:"apply"`
	Delete string `yaml:"delete"`
	Curl   *Curl  `yaml:"curl"`
}

type Curl struct {
	Path       string            `yaml:"path"`
	Host       string            `yaml:"host"`
	Headers    map[string]string `yaml:"headers"`
	StatusCode int               `yaml:"statusCode"`
}

type Valet struct {
	// If true, download artifacts from valet's Google storage bucket.
	ValetArtifacts bool
	// If set, use this directory on the local filesystem to find product artifact.
	// This directory is used even if valet artifacts is set to true (it will not download from Google).
	LocalArtifactsDir string
}
