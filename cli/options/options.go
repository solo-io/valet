package options

import "context"

type Options struct {
	Ensure Ensure
	Build  Build
	Top    Top
}

type Top struct {
	Ctx                context.Context
	LocalPathToGlooctl string
	GlooUrl            string
}

type Ensure struct {
	File      string
	Cluster   Cluster
	Gloo      Gloo
	Demos     Demos
	Resources []string
}

type Cluster struct {
	Minikube    Minikube `yaml:"minikube"`
	GKE         GKE      `yaml:"gke"`
	Type        string   `yaml:"type"`
	KubeVersion string   `yaml:"kube_version"`
}

type GKE struct {
	Name     string `yaml:"name"`
	Location string `yaml:"location"`
	Project  string `yaml:"project"`
}

type Minikube struct{}

type Gloo struct {
	Version          string `yaml:"version"`
	Enterprise       bool   `yaml:"enterprise"`
	ValetArtifacts   bool   `yaml:"valetArtifacts"`
	LocalArtifactDir string `yaml:"localArtifactDir"`
	LicenseKey       string `yaml:"license_key"`
	AWS              AWS    `yaml:"aws"`
	// If present, a virtual service will be created called "glooui".
	UiVirtualService *UiVirtualService `yaml:"ui_virtual_service"`
}

type UiVirtualService struct {
	// If nil, the default domain "*" is used. Otherwise, a DNS entry is created in Route53
	// with the provided DNS configuration.
	DNS *DNS `yaml:"dns"`
}

type AWS struct {
	Secret   bool `yaml:"secret"`
	Upstream bool `yaml:"upstream"`
}

type DNS struct {
	// The hosted zone to use for the DNS entry. This is required and must match the name of a hosted zone in Route53.
	// Valet will use the AWS credentials provided in AWS_SHARED_CREDENTIALS_FILE.
	// The credentials must have the following AWS privileges:
	//   route53:ChangeResourceRecordSets
	//   route53:ListHostedZones
	HostedZone string `yaml:"hosted_zone"`
	// The domain to map to the proxy URL. This is optional. If no value is provided, then a domain will be autogenerated
	// in the form: valet-########.HOSTED_ZONE
	Domain string `yaml:"domain"`
}

type Demos struct {
	Petclinic *Petclinic `yaml:"petclinic"`
}

type Petclinic struct {
	DNS *DNS `yaml:"dns"`
}

type Build struct {
	File    string
	Version string
	// if true, then don't push images to docker repo
	SkipDockerPush bool
}

type Workflow struct {
	Name  string `yaml:"name"`
	Steps []Step `yaml:"steps"`
}

type Step struct {
	Apply string `yaml:"apply"`
	Curl  *Curl  `yaml:"curl"`
}

type Curl struct {
	Path       string            `yaml:"path"`
	Host       string            `yaml:"host"`
	Headers    map[string]string `yaml:"headers"`
	StatusCode int               `yaml:"status_code"`
}
